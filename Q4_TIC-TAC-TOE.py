# -*- coding: utf-8 -*-
"""Q4 TIC-TAC-TOE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z80-BJ1For4TMRF3KxZceDZTwpaCSyZJ
"""

import random

board = [' ' for x in range(10)]
def insert_letter(letter, pos):
    board[pos] = letter

def empty_space(pos):
    return board[pos] == ' '

def printBoard(board):
    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('-----------')
    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('-----------')
    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])

def Win_combos(board1, sym):
    return (board1[7] == sym and board1[8] == sym and board1[9] == sym) or (board1[4] == sym and board1[5] == sym and board1[6] == sym) or (
            board1[1] == sym and board1[2] == sym and board1[3] == sym) or (board1[1] == sym and board1[4] == sym and board1[7] == sym) or (
                   board1[2] == sym and board1[5] == sym and board1[8] == sym) or (
                   board1[3] == sym and board1[6] == sym and board1[9] == sym) or (
                   board1[1] == sym and board1[5] == sym and board1[9] == sym) or (board1[3] == sym and board1[5] == sym and board1[7] == sym)


def player_move():
    run = True
    while run:
        move = input('Please select a position to place an X (1-9): ')
        move = int(move)
        if move > 0 and move < 10:
            if empty_space(move):
                run = False
                insert_letter('X', move)
            else:
                print('Sorry, this space is occupied! Choose an another one.')
        else:
            print('Please type a number within the range!')

def selectRandom(li):
    ln = len(li)
    r = random.randrange(0, ln)
    return li[r]


def board_full(board):
    if board.count(' ') > 1:
        return False
    else:
        return True



def comp_move():
    possible_moves = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]
    move = 0

    for let in ['O', 'X']:
        for i in possible_moves:
            boardCopy = board[:]
            boardCopy[i] = let
            if Win_combos(boardCopy, let):
                move = i
                return move

    corners_open = []
    for i in possible_moves:
        if i in [1, 3, 7, 9]:
            corners_open.append(i)

    edges_open = []
    for i in possible_moves:
        if i in [2, 4, 6, 8]:
            edges_open.append(i)

    if len(corners_open) > 0:
        move = selectRandom(corners_open)
        return move

    if len(edges_open) > 0:
        move = selectRandom(edges_open)

    return move

    if 5 in possible_moves:
        move = 5
        return move




def main():
    print('Welcome to Tic Tac Toe!')
    printBoard(board)

    while not (board_full(board)):
        if not (Win_combos(board, 'O')):
            player_move()
            printBoard(board)
        else:
            print('Sorry, Computer won the game!')
            break

        if not (Win_combos(board, 'X')):
            move = comp_move()
            if move == 0:
                print('Tie Game!')
            else:
                insert_letter('O', move)
                print('Computer placed an O in position', move, ':')
                printBoard(board)
        else:
            print('You won the game! Good Job!')
            break

    if board_full(board):
        print('Tie Game!')

while True:
    answer = input('Do you want to play? (Y/N)')
    if answer.lower() == 'y' or answer.lower == 'yes':
        board = [' ' for x in range(10)]
        print('                             ')
        main()
    else:
        break